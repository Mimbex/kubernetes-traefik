apiVersion: v1
kind: ConfigMap
metadata:
  name: restore-script
  namespace: backups
data:
  restore.sh: |
    #!/bin/bash
    set -e
    
    # Configuration
    BACKUP_DIR="/backups"
    DB_HOST="postgresql.postgresql.svc.cluster.local"
    DB_PORT="5432"
    DB_USER="odoo"
    DB_NAME="postgres"
    ODOO_DATA_DIR="/odoo-data"
    
    # Check if backup file is provided
    if [ -z "$1" ]; then
        echo "‚ùå Error: No backup file specified"
        echo "Usage: restore.sh <backup-file_complete.tar.gz>"
        echo ""
        echo "Available backups:"
        ls -lh ${BACKUP_DIR}/*_complete.tar.gz 2>/dev/null || echo "No backups found"
        exit 1
    fi
    
    BACKUP_FILE="$1"
    
    if [ ! -f "${BACKUP_DIR}/${BACKUP_FILE}" ]; then
        echo "‚ùå Error: Backup file not found: ${BACKUP_FILE}"
        exit 1
    fi
    
    echo "üîÑ Starting COMPLETE restore from ${BACKUP_FILE}"
    echo "================================================"
    echo "‚ö†Ô∏è  WARNING: This will overwrite existing data!"
    echo ""
    
    # Extract backup
    echo "üì¶ Extracting backup..."
    cd ${BACKUP_DIR}
    tar -xzf ${BACKUP_FILE}
    
    # Get the directory name (timestamp without _complete)
    DIR_NAME=$(basename ${BACKUP_FILE} _complete.tar.gz)
    
    # Show manifest
    if [ -f "${DIR_NAME}/manifest.txt" ]; then
        echo ""
        echo "üìã Backup information:"
        cat ${DIR_NAME}/manifest.txt
        echo ""
    fi
    
    # 1. Restore database
    echo "üîÑ [1/3] Restoring PostgreSQL database..."
    PGPASSWORD=${POSTGRES_PASSWORD} pg_restore \
      -h ${DB_HOST} \
      -p ${DB_PORT} \
      -U ${DB_USER} \
      -d ${DB_NAME} \
      -c \
      ${DIR_NAME}/database.dump
    echo "   ‚úÖ Database restored"
    
    # 2. Restore filestore
    if [ -f "${DIR_NAME}/filestore.tar.gz" ]; then
        echo "üìÅ [2/3] Restoring Odoo filestore..."
        
        # Backup existing filestore (just in case)
        if [ -d "${ODOO_DATA_DIR}/filestore" ]; then
            echo "   üì¶ Backing up existing filestore..."
            mv ${ODOO_DATA_DIR}/filestore ${ODOO_DATA_DIR}/filestore.old.$(date +%s)
        fi
        
        # Restore filestore
        tar -xzf ${DIR_NAME}/filestore.tar.gz -C ${ODOO_DATA_DIR}/
        echo "   ‚úÖ Filestore restored"
    else
        echo "‚ö†Ô∏è  [2/3] Filestore not found in backup, skipping..."
    fi
    
    # 3. Restore sessions (optional)
    if [ -f "${DIR_NAME}/sessions.tar.gz" ]; then
        echo "üíæ [3/3] Restoring Odoo sessions..."
        
        # Remove old sessions
        rm -rf ${ODOO_DATA_DIR}/sessions
        
        # Restore sessions
        tar -xzf ${DIR_NAME}/sessions.tar.gz -C ${ODOO_DATA_DIR}/
        echo "   ‚úÖ Sessions restored"
    else
        echo "‚ÑπÔ∏è  [3/3] Sessions not found in backup, skipping..."
    fi
    
    # Cleanup
    rm -rf ${DIR_NAME}
    
    echo ""
    echo "‚úÖ COMPLETE restore finished at $(date)"
    echo "================================================"
    echo ""
    echo "‚ö†Ô∏è  IMPORTANT: Restart Odoo pods to apply changes:"
    echo "   kubectl rollout restart deployment odoo -n odoo"
