apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-script
  namespace: backups
data:
  backup.sh: |
    #!/bin/bash
    set -e
    
    # Configuration
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    BACKUP_DIR="/backups"
    DB_HOST="postgresql.postgresql.svc.cluster.local"
    DB_PORT="5432"
    DB_USER="odoo"
    DB_NAME="postgres"
    ODOO_DATA_DIR="/odoo-data"
    RETENTION_DAYS=7
    
    echo "🔄 Starting COMPLETE backup at $(date)"
    echo "================================================"
    
    # 1. Backup all Odoo databases individually
    echo "📦 [1/1] Backing up Odoo databases..."
    
    # Get list of Odoo databases (exclude postgres, template0, template1)
    DATABASES=$(PGPASSWORD=${POSTGRES_PASSWORD} psql \
      -h ${DB_HOST} \
      -p ${DB_PORT} \
      -U ${DB_USER} \
      -d postgres \
      -t -c "SELECT datname FROM pg_database WHERE datname NOT IN ('postgres', 'template0', 'template1');" | grep -v '^$')
    
    if [ -z "$DATABASES" ]; then
        echo "   ⚠️  No Odoo databases found to backup"
    else
        for DB in $DATABASES; do
            DB_CLEAN=$(echo $DB | xargs)  # Remove whitespace
            echo "   📦 Backing up database: ${DB_CLEAN}..."
            
            # Create temporary directory for this database
            TEMP_DIR="${BACKUP_DIR}/temp_${DB_CLEAN}_${TIMESTAMP}"
            mkdir -p ${TEMP_DIR}
            
            # 1. Backup database in PostgreSQL custom format (for pg_restore)
            echo "      📦 Creating PostgreSQL dump..."
            PGPASSWORD=${POSTGRES_PASSWORD} pg_dump \
              -h ${DB_HOST} \
              -p ${DB_PORT} \
              -U ${DB_USER} \
              -d ${DB_CLEAN} \
              -F c \
              -f ${TEMP_DIR}/database.dump
            
            DUMP_SIZE=$(du -h ${TEMP_DIR}/database.dump | cut -f1)
            echo "         ✅ PostgreSQL dump: ${DUMP_SIZE}"
            
            # 2. Backup database in SQL format (for Odoo restore)
            echo "      📄 Creating SQL dump (Odoo compatible)..."
            PGPASSWORD=${POSTGRES_PASSWORD} pg_dump \
              -h ${DB_HOST} \
              -p ${DB_PORT} \
              -U ${DB_USER} \
              -d ${DB_CLEAN} \
              --no-owner \
              --no-privileges \
              -f ${TEMP_DIR}/dump.sql
            
            SQL_SIZE=$(du -h ${TEMP_DIR}/dump.sql | cut -f1)
            echo "         ✅ SQL dump: ${SQL_SIZE}"
            
            # Backup filestore for this database (if exists)
            if [ -d "${ODOO_DATA_DIR}/filestore/${DB_CLEAN}" ]; then
                echo "      📁 Backing up filestore..."
                tar -czf ${TEMP_DIR}/filestore.tar.gz \
                  -C ${ODOO_DATA_DIR}/filestore ${DB_CLEAN}/
                FS_SIZE=$(du -h ${TEMP_DIR}/filestore.tar.gz | cut -f1)
                echo "         ✅ Filestore: ${FS_SIZE}"
            fi
            
            # Create manifest for this database
            echo "Backup Date: $(date)" > ${TEMP_DIR}/manifest.txt
            echo "Timestamp: ${TIMESTAMP}" >> ${TEMP_DIR}/manifest.txt
            echo "Database: ${DB_CLEAN}" >> ${TEMP_DIR}/manifest.txt
            echo "Odoo Version: 19.0" >> ${TEMP_DIR}/manifest.txt
            echo "PostgreSQL Version: 17" >> ${TEMP_DIR}/manifest.txt
            
            # Create directory for this database
            mkdir -p ${BACKUP_DIR}/${DB_CLEAN}
            
            # Create PostgreSQL backup (tar.gz with database.dump)
            echo "      📦 Creating PostgreSQL backup..."
            cd ${BACKUP_DIR}
            tar -czf ${DB_CLEAN}/${TIMESTAMP}_postgresql.tar.gz -C ${TEMP_DIR} database.dump filestore.tar.gz manifest.txt 2>/dev/null || \
            tar -czf ${DB_CLEAN}/${TIMESTAMP}_postgresql.tar.gz -C ${TEMP_DIR} database.dump manifest.txt
            
            PG_SIZE=$(du -h ${DB_CLEAN}/${TIMESTAMP}_postgresql.tar.gz | cut -f1)
            echo "         ✅ ${TIMESTAMP}_postgresql.tar.gz (${PG_SIZE})"
            
            # Create Odoo-compatible backup (zip with dump.sql)
            echo "      📦 Creating Odoo-compatible backup..."
            cd ${TEMP_DIR}
            if [ -f "filestore.tar.gz" ]; then
                # Extract filestore for ZIP
                mkdir -p filestore
                tar -xzf filestore.tar.gz -C filestore
                zip -r ${BACKUP_DIR}/${DB_CLEAN}/${TIMESTAMP}_odoo.zip dump.sql filestore/ > /dev/null 2>&1
                rm -rf filestore
            else
                zip ${BACKUP_DIR}/${DB_CLEAN}/${TIMESTAMP}_odoo.zip dump.sql > /dev/null 2>&1
            fi
            
            ODOO_SIZE=$(du -h ${BACKUP_DIR}/${DB_CLEAN}/${TIMESTAMP}_odoo.zip | cut -f1)
            echo "         ✅ ${TIMESTAMP}_odoo.zip (${ODOO_SIZE})"
            
            # Cleanup temp directory
            rm -rf ${TEMP_DIR}
        done
    fi
    
    echo ""
    echo "✅ Backup process completed!"
    echo "   $(echo $DATABASES | wc -w) database(s) backed up"
    
    # Clean old backups
    echo ""
    echo "🧹 Cleaning backups older than ${RETENTION_DAYS} days..."
    find ${BACKUP_DIR} -name "*.tar.gz" -type f -mtime +${RETENTION_DAYS} -delete
    find ${BACKUP_DIR} -name "*.zip" -type f -mtime +${RETENTION_DAYS} -delete
    
    # List current backups
    echo ""
    echo "📋 Current backups by database:"
    for DB_DIR in ${BACKUP_DIR}/*/; do
        if [ -d "$DB_DIR" ]; then
            DB_NAME=$(basename "$DB_DIR")
            echo "  📁 ${DB_NAME}:"
            ls -lh ${DB_DIR}*_postgresql.tar.gz 2>/dev/null | awk '{print "     🐘 " $9 " (" $5 ")"}'
            ls -lh ${DB_DIR}*_odoo.zip 2>/dev/null | awk '{print "     📦 " $9 " (" $5 ")"}'
        fi
    done
    
    echo ""
    echo "✅ Backup process completed at $(date)"
    echo "================================================"
