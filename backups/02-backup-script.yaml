apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-script
  namespace: backups
data:
  backup.sh: |
    #!/bin/bash
    set -e
    
    # Configuration
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    BACKUP_DIR="/backups"
    DB_HOST="postgresql.postgresql.svc.cluster.local"
    DB_PORT="5432"
    DB_USER="odoo"
    DB_NAME="postgres"
    ODOO_DATA_DIR="/odoo-data"
    RETENTION_DAYS=7
    
    echo "🔄 Starting COMPLETE backup at $(date)"
    echo "================================================"
    
    # 1. Backup all Odoo databases individually
    echo "📦 [1/1] Backing up Odoo databases..."
    
    # Get list of Odoo databases (exclude postgres, template0, template1)
    DATABASES=$(PGPASSWORD=${POSTGRES_PASSWORD} psql \
      -h ${DB_HOST} \
      -p ${DB_PORT} \
      -U ${DB_USER} \
      -d postgres \
      -t -c "SELECT datname FROM pg_database WHERE datname NOT IN ('postgres', 'template0', 'template1');" | grep -v '^$')
    
    if [ -z "$DATABASES" ]; then
        echo "   ⚠️  No Odoo databases found to backup"
    else
        for DB in $DATABASES; do
            DB_CLEAN=$(echo $DB | xargs)  # Remove whitespace
            echo "   📦 Backing up database: ${DB_CLEAN}..."
            
            # Create temporary directory for this database
            TEMP_DIR="${BACKUP_DIR}/temp_${DB_CLEAN}_${TIMESTAMP}"
            mkdir -p ${TEMP_DIR}
            
            # Backup database
            PGPASSWORD=${POSTGRES_PASSWORD} pg_dump \
              -h ${DB_HOST} \
              -p ${DB_PORT} \
              -U ${DB_USER} \
              -d ${DB_CLEAN} \
              -F c \
              -f ${TEMP_DIR}/database.dump
            
            DB_SIZE=$(du -h ${TEMP_DIR}/database.dump | cut -f1)
            echo "      ✅ Database: ${DB_SIZE}"
            
            # Backup filestore for this database (if exists)
            if [ -d "${ODOO_DATA_DIR}/filestore/${DB_CLEAN}" ]; then
                echo "      📁 Backing up filestore..."
                tar -czf ${TEMP_DIR}/filestore.tar.gz \
                  -C ${ODOO_DATA_DIR}/filestore ${DB_CLEAN}/
                FS_SIZE=$(du -h ${TEMP_DIR}/filestore.tar.gz | cut -f1)
                echo "         ✅ Filestore: ${FS_SIZE}"
            fi
            
            # Create manifest for this database
            echo "Backup Date: $(date)" > ${TEMP_DIR}/manifest.txt
            echo "Timestamp: ${TIMESTAMP}" >> ${TEMP_DIR}/manifest.txt
            echo "Database: ${DB_CLEAN}" >> ${TEMP_DIR}/manifest.txt
            echo "Odoo Version: 19.0" >> ${TEMP_DIR}/manifest.txt
            echo "PostgreSQL Version: 17" >> ${TEMP_DIR}/manifest.txt
            
            # Compress this database backup
            echo "      📦 Compressing..."
            cd ${BACKUP_DIR}
            tar -czf ${TIMESTAMP}_${DB_CLEAN}.tar.gz -C ${TEMP_DIR} .
            rm -rf ${TEMP_DIR}
            
            BACKUP_SIZE=$(du -h ${TIMESTAMP}_${DB_CLEAN}.tar.gz | cut -f1)
            echo "      ✅ Backup created: ${TIMESTAMP}_${DB_CLEAN}.tar.gz (${BACKUP_SIZE})"
        done
    fi
    
    echo ""
    echo "✅ Backup process completed!"
    echo "   $(echo $DATABASES | wc -w) database(s) backed up"
    
    # Clean old backups
    echo ""
    echo "🧹 Cleaning backups older than ${RETENTION_DAYS} days..."
    find ${BACKUP_DIR} -name "*.tar.gz" -type f -mtime +${RETENTION_DAYS} -delete
    
    # List current backups
    echo ""
    echo "📋 Current backups:"
    ls -lh ${BACKUP_DIR}/*.tar.gz 2>/dev/null || echo "No backups found"
    
    echo ""
    echo "✅ Backup process completed at $(date)"
    echo "================================================"
