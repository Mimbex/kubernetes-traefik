apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-script
  namespace: backups
data:
  backup.sh: |
    #!/bin/bash
    set -e
    
    # Configuration
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    BACKUP_DIR="/backups"
    DB_HOST="postgresql.postgresql.svc.cluster.local"
    DB_PORT="5432"
    DB_USER="odoo"
    DB_NAME="postgres"
    ODOO_DATA_DIR="/odoo-data"
    RETENTION_DAYS=7
    
    echo "🔄 Starting COMPLETE backup at $(date)"
    echo "================================================"
    
    # Create backup directory
    mkdir -p ${BACKUP_DIR}/${TIMESTAMP}
    
    # 1. Backup all Odoo databases individually
    echo "📦 [1/2] Backing up Odoo databases..."
    
    # Get list of Odoo databases (exclude postgres, template0, template1)
    DATABASES=$(PGPASSWORD=${POSTGRES_PASSWORD} psql \
      -h ${DB_HOST} \
      -p ${DB_PORT} \
      -U ${DB_USER} \
      -d postgres \
      -t -c "SELECT datname FROM pg_database WHERE datname NOT IN ('postgres', 'template0', 'template1');" | grep -v '^$')
    
    if [ -z "$DATABASES" ]; then
        echo "   ⚠️  No Odoo databases found to backup"
    else
        for DB in $DATABASES; do
            DB_CLEAN=$(echo $DB | xargs)  # Remove whitespace
            echo "   📦 Backing up database: ${DB_CLEAN}..."
            
            # Create directory for this database
            mkdir -p ${BACKUP_DIR}/${TIMESTAMP}/${DB_CLEAN}
            
            # Backup database
            PGPASSWORD=${POSTGRES_PASSWORD} pg_dump \
              -h ${DB_HOST} \
              -p ${DB_PORT} \
              -U ${DB_USER} \
              -d ${DB_CLEAN} \
              -F c \
              -f ${BACKUP_DIR}/${TIMESTAMP}/${DB_CLEAN}/database.dump
            
            DB_SIZE=$(du -h ${BACKUP_DIR}/${TIMESTAMP}/${DB_CLEAN}/database.dump | cut -f1)
            echo "      ✅ ${DB_CLEAN}: ${DB_SIZE}"
            
            # Backup filestore for this database (if exists)
            if [ -d "${ODOO_DATA_DIR}/filestore/${DB_CLEAN}" ]; then
                echo "      📁 Backing up filestore for ${DB_CLEAN}..."
                tar -czf ${BACKUP_DIR}/${TIMESTAMP}/${DB_CLEAN}/filestore.tar.gz \
                  -C ${ODOO_DATA_DIR}/filestore ${DB_CLEAN}/
                FS_SIZE=$(du -h ${BACKUP_DIR}/${TIMESTAMP}/${DB_CLEAN}/filestore.tar.gz | cut -f1)
                echo "         ✅ Filestore: ${FS_SIZE}"
            fi
        done
    fi
    
    # 2. Backup Odoo sessions (optional)
    if [ -d "${ODOO_DATA_DIR}/sessions" ]; then
        echo "💾 [2/2] Backing up Odoo sessions..."
        tar -czf ${BACKUP_DIR}/${TIMESTAMP}/sessions.tar.gz \
          -C ${ODOO_DATA_DIR} sessions/
        echo "   ✅ Sessions backup completed"
    else
        echo "ℹ️  [2/2] Sessions not found, skipping..."
    fi
    
    # Create backup manifest
    echo "📝 Creating backup manifest..."
    echo "Backup Date: $(date)" > ${BACKUP_DIR}/${TIMESTAMP}/manifest.txt
    echo "Timestamp: ${TIMESTAMP}" >> ${BACKUP_DIR}/${TIMESTAMP}/manifest.txt
    echo "Databases: $(echo $DATABASES | wc -w) Odoo database(s)" >> ${BACKUP_DIR}/${TIMESTAMP}/manifest.txt
    echo "Database Names: ${DATABASES}" >> ${BACKUP_DIR}/${TIMESTAMP}/manifest.txt
    echo "Filestore Size: ${FS_SIZE:-N/A}" >> ${BACKUP_DIR}/${TIMESTAMP}/manifest.txt
    echo "Odoo Version: 19.0" >> ${BACKUP_DIR}/${TIMESTAMP}/manifest.txt
    echo "PostgreSQL Version: 17" >> ${BACKUP_DIR}/${TIMESTAMP}/manifest.txt
    
    # Compress complete backup
    echo "📦 Compressing complete backup..."
    cd ${BACKUP_DIR}
    tar -czf ${TIMESTAMP}_complete.tar.gz ${TIMESTAMP}/
    rm -rf ${TIMESTAMP}/
    
    # Calculate total backup size
    TOTAL_SIZE=$(du -h ${TIMESTAMP}_complete.tar.gz | cut -f1)
    echo ""
    echo "✅ COMPLETE backup finished: ${TIMESTAMP}_complete.tar.gz"
    echo "   Total size: ${TOTAL_SIZE}"
    echo "   Contents: Databases (with individual filestores) + Sessions + Manifest"
    
    # Clean old backups
    echo ""
    echo "🧹 Cleaning backups older than ${RETENTION_DAYS} days..."
    find ${BACKUP_DIR} -name "*_complete.tar.gz" -type f -mtime +${RETENTION_DAYS} -delete
    
    # List current backups
    echo ""
    echo "📋 Current backups:"
    ls -lh ${BACKUP_DIR}/*_complete.tar.gz 2>/dev/null || echo "No backups found"
    
    echo ""
    echo "✅ Backup process completed at $(date)"
    echo "================================================"
